//You build Angular applications with components.
//Components define areas of responsibility
//in the UI that let you reuse sets of UI functionality.

//A component consists of three things.
//component class
//html template
//component specific styles

/*<app-root>  The first component to load and the container
              for the other components
<app-top-bar>	The store name and checkout button
<app-product-list>	The product list
<app-product-alerts>	A component that contains the application's alerts*/


Create the product list
In this section, you'll update the application to display a list of products.
You'll use predefined product data from the products.ts file and methods from
the product-list.component.ts file. This section guides you through editing the HTML,
also known as the template.

In the product-list folder, open the template file product-list.component.html.
Add an *ngFor structural directive on a <div>, as follows.

<h2>Products</h2>
<div *ngFor="let product of products">
</div>

With *ngFor, the <div> repeats for each product in the list.
Structural directives shape or reshape the DOM's structure, by adding,
removing, and manipulating elements. For more information about structural 
directives, see Structural directives.

Inside the <div>, add an <h3> and {{ product.name }}. The {{ product.name }} statement 
is an example of Angular's interpolation syntax. Interpolation {{ }} lets you render
the property value as text.

<h2>Products</h2>

<div *ngFor="let product of products">
  <h3>
      {{ product.name }}
  </h3>
</div>

To make each product name a link to product details, add the <a> 
element around {{ product.name }}.
Set the title to be the product's name by using the property
binding [ ] syntax, as follows:

<h2>Products</h2>
<div *ngFor="let product of products">
  <h3>
    <a [title]="product.name + ' details'">
      {{ product.name }}
    </a>
  </h3>
</div>

In the preview pane, hover over a product name to see the bound name property value, which is 
the product name plus the word "details". Property binding [ ] lets you use
the property value in a template expression.

Add the product descriptions. On a <p> element, use an *ngIf directive so that
Angular only creates the <p> element if the current product has a description.

The application now displays the name and description of each product in the list. Notice
that the final product does not have a description paragraph. Angular doesn't create the <p> 
element because the product's description property is empty.

Add a button so users can share a product. Bind the button's click event to the 
share() method 
in product-list.component.ts. Event binding uses a set of parentheses, ( ), 
around the event,as in the (click) event on the <button> element.

Clicking the Share button triggers an alert that states,"The product has been shared!".


Pass data to a child component
Currently, the product list displays the name and description of each product. The
ProductListComponent also defines a products property that contains imported data for 
each product from the products array in products.ts.

The next step is to create a new alert feature that uses product data 
from the ProductListComponent. 
The alert checks the product's price, and, if the price is greater than $700, 
displays a Notify Me
button that lets users sign up for notifications when the product goes on sale.

This section walks you through creating a child component, ProductAlertsComponent,
that can receive data from its parent component, ProductListComponent.
Click on the plus sign above the current terminal to create a new terminal to 
run the command to generate the component.

Open product-alerts.component.ts. The @Component() decorator indicates that the following 
class is a component. @Component() also provides metadata about the component, 
including its selector, templates, and styles.

Key features in the @Component() are as follows:

The selector, app-product-alerts, identifies the component. By convention, 
Angular component selectors begin with the prefix app-, followed by the component name.
The template and style filenames reference the component's HTML and CSS
The @Component() definition also exports the class, ProductAlertsComponent, 
which handles functionality for the component.

To set up ProductAlertsComponent to receive product data, first import Input from @angular/core.

In the ProductAlertsComponent class definition, define a property named product
with an @Input() decorator.
The @Input() decorator indicates that the property value passes in from the
component's parent, ProductListComponent.


Finally, to display ProductAlertsComponent as a child of ProductListComponent, 
add the <app-product-alerts> element to product-list.component.html. Pass the current
product as input to the component using property binding.

<button type="button" (click)="share()">
  Share
</button>

<app-product-alerts [product]="product">
</app-product-alerts>

The new product alert component takes a product as input from the product list. 
With that input, it shows or hides the Notify Me button, based on the price of the product.
The Phone XL price is over $700, so the Notify Me button appears on that product.

Pass data to a parent component
To make the Notify Me button work, the child component needs to notify and pass the data
to the parent component. The ProductAlertsComponent needs to emit an event when the user
clicks Notify Me and the ProductListComponent needs to respond to the event.

In new components, the Angular Generator includes an empty constructor(), the OnInit interface, 
and the ngOnInit() method. Since these steps don't use them, the following code examples 
omit them for brevity.

In product-alerts.component.ts, import Output and EventEmitter from @angular/core.

In the component class, define a property named notify with an @Output() decorator 
and an instance
of EventEmitter(). Configuring ProductAlertsComponent with an @Output() allows the
ProductAlertsComponent 
to emit an event when the value of the notify property changes.

export class ProductAlertsComponent {
  @Input() product: Product | undefined;
  @Output() notify = new EventEmitter();
}

Define the behavior that happens when the user clicks the button. 
The parent, ProductListComponent —not the ProductAlertsComponent— acts 
when the child raises the event. In product-list.component.ts, define an onNotify()
method,similar to the share() method.

At this stage of development, the online store application has a basic product catalog.
In the following sections, you'll add the following features to the application:
Type a URL in the address bar to navigate to a corresponding product page
Click links on the page to navigate within your single-page application
Click the browser's back and forward buttons to navigate the browser history intuitively

The application already uses the Angular Router to navigate to the ProductListComponent. 
This section shows you how to define a route to show individual product details.

Generate a new component for product details. In the terminal generate a new 
product-details component by running the following command:

In app.module.ts, add a route for product details, with a path of products/:productId 
and ProductDetailsComponent for the component.

rc/app/app.module.ts
content_copy
@NgModule({
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    RouterModule.forRoot([
      { path: '', component: ProductListComponent },
      { path: 'products/:productId', component: ProductDetailsComponent },
    ])
  ],
  declarations: [
    AppComponent,
    TopBarComponent,
    ProductListComponent,
    ProductAlertsComponent,
    ProductDetailsComponent,
  ]

The RouterLink directive helps you customize the anchor element. In this case,
the route, or URL, contains one fixed segment, /products. The final segment is variable,
inserting the id property of the current product. For example, the URL for a product
with an id of 1 would be similar to https://getting-started-myfork.stackblitz.io/products/1.

Verify that the router works as intended by clicking the product name. The 
application should display the ProductDetailsComponent, which currently says
"product-details works!"

Notice that the URL in the preview window changes. The final segment is
products/# where # is the number of the route you clicked.


The ProductDetailsComponent handles the display of each product. The Angular Router 
displays components based on the browser's URL and your defined routes.

In this section, you'll use the Angular Router to combine the products data and route
information to display the specific details for each product.

In product-details.component.ts, import ActivatedRoute from @angular/router, and the 
products array from ../products.

src/app/product-details/product-details.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Product, products } from '../products';


ActivatedRoute is specific to each component that the Angular Router loads. ActivatedRoute
contains information about the route and the route's parameters.

By injecting ActivatedRoute, you are configuring the component to use a service. The Managing
Data step covers services in more detail.

In the ngOnInit() method, extract the productId from the route parameters and find the
corresponding product in the products array.
The route parameters correspond to the path variables you define in the route. To access the route parameters,
we use route.snapshot, which is the ActivatedRouteSnapshot that contains information about the active route 
at that particular moment in time. The URL that matches the route provides the productId . Angular uses the
productId to display the details for each unique product.

Update the ProductDetailsComponent template to display product details with an *ngIf. If a product 
exists, the <div> renders with a name, price, and description.

<h2>Product Details</h2>

<div *ngIf="product">
  <h3>{{ product.name }}</h3>
  <h4>{{ product.price | currency }}</h4>
  <p>{{ product.description }}</p>
</div>

The route parameters correspond to the path variables you define in the route. To access the route
parameters, we use route.snapshot, which is the ActivatedRouteSnapshot that contains information 
about the active route at that particular moment in time. The URL that matches the route provides
the productId . Angular uses the productId to display the details for each unique product.


The line, <h4>{{ product.price | currency }}</h4>, uses the currency pipe to transform product.price
from a number to a currency string. A pipe is a way you can transform data in your HTML template.
For more information about Angular pipes, see Pipes.


When users click on a name in the product list, the router navigates them to the distinct URL 
for the product, shows the ProductDetailsComponent, and displays the product details.

to generate component-ng generate component

This section walks you through creating the CartService that tracks products added to shopping cart.
In the terminal generate a new cart service by running the following command:
ng generate service cart

Import the Product interface from ./products.ts into the cart.service.ts file, and in 
the CartService class, define an items property to store the array of the current products in the cart.
Define methods to add items to the cart, return cart items, and clear the cart items.

  addToCart(product: Product) {
    this.items.push(product);
  }

  getItems() {
    return this.items;
  }

  clearCart() {
    this.items = [];
    return this.items;
  }
/* . . . */
}
The addToCart() method appends a product to an array of items
The getItems() method collects the items users add to the cart and returns each item with its associated quantity
The clearCart() method returns an empty array of items, which empties the cart






